// Table mark

@mixin table-mark($bg-color) {

    tbody,
    tfoot {

        tr,
        th,
        td {
            &:hover {
                color: #000;
                background-color: rgba($bg-color, .1) !important;
            }
        }
    }
}

// Table actions

@mixin table-actions-align-x($text-aling) {
    th:last-child {
        width: 100px;
        text-align: $text-aling;
    }

    td:last-child {
        text-align: $text-aling;
        white-space: nowrap;
    }
}

@mixin box-shadow($color) {
    box-shadow: 0px 7px 20px $color;
}

// Clean list style

@mixin reset-list-style {

    margin: 0;
    padding: 0;
    list-style: none;

    ul,
    ol {
        margin: 0;
        padding: 0;
        list-style: none;
    }
}

@mixin href-default-none {
    [href] {
        color: inherit;
        text-decoration: none;
    }
}

@mixin scrollbar-hidden {

    // Microsoft browser
    -ms-overflow-style: none;

    // Firefox browser
    scrollbar-width: none;

    // Chrome, Opera ...
    ::-webkit-scrollbar {
        display: none;
    }
}

@mixin disabled-item {
    color: $disabled-text !important;
    background-color: $disabled-background !important;
    pointer-events: none;
}

// Button solid

@mixin button-solid($color) {
    color: #fff !important;
    background-color: $color !important;

    &:focus-visible {
        box-shadow: $focus-form-bxsh-offset rgba($color, .5) !important;
    }

    &:hover {
        background-color: darken($color, 4%) !important;
    }
}

// Button outline

@mixin button-outline($color) {
    color: $color !important;
    border: 1px solid $color !important;

    &:focus-visible {
        box-shadow: $focus-form-bxsh-offset rgba($color, .5) !important;
    }

    &:hover {
        color: rgba($color, .9) !important;
        border-color: rgba($color, .7) !important;
    }
}

//Dropdown breakpoints 

@mixin dropdown-breakpoint {
    min-width: 100%;
    white-space: normal;
    position: relative;
    box-shadow: none;
}

// Focus 

@mixin focus-style-form($color, $color-mobile-device) {
    outline: none;
    border-color: $color !important;

        @include breakpoint-max(tab) {
            border: 2px solid $color-mobile-device !important;
        }
        
    box-shadow: none;
    position: relative;
}

@mixin focus-checkbox-form {
    outline: none;
    outline: 1px solid $border-focus !important;
    box-shadow: none;
    position: relative;
}

// Focus button 

@mixin focus-visible-button {
    outline: none;
    border-color: transparent;
    position: relative;
}

//Dropdown full-width (dropdown-content) 

@mixin dropdown-full-width {
    .dropdown-toggle {
        display: inline-block;
        width: 100%;
        text-align: left;
    }

    .dropdown-content {
        width: 100%;
    }
}

//Item

@mixin item($item-y, $item-x) {
    display: block;
    padding: $item-y $item-x;
}

//Item global properties

@mixin item-global-properties {
    display: block;
    padding: .5rem $bttn-X-padding;
    margin: 0.125rem;
    white-space: nowrap;
}

// Switch ade in css

@mixin switch-fade-in {
    visibility: hidden;
    opacity: 0;
    transition: opacity 1s, visibility 1s;
}

// Switch fade out css

@mixin switch-fade-out {
    visibility: hidden;
    opacity: 0;
    transition: opacity .5s, visibility .5s;
}

// Visibility elements

@mixin switch-fade-all-visible {
    visibility: visible;
    opacity: 1;
}

// Hover item

@mixin hover-item($hover-color) {
    transition: background-color $transition-default;

    &:hover {
        background-color: $hover-color;
        opacity: 1 !important;
    }
}

// Hover opacity

@mixin hover-opacity($opacity) {
    transition: opacity $transition-default;

    &:hover {
        opacity: $opacity !important;
        background-color: transparent !important;
    }
}


// breakpoint mixin

@mixin breakpoint-min($point) {
    @if $point ==pho {
        @media screen and (min-width: map-get($breakpoint, pho)) {
            @content;
        }
    }

    @if $point ==pha {
        @media screen and (min-width: map-get($breakpoint, pha)) {
            @content;
        }
    }

    @if $point ==tab {
        @media screen and (min-width: map-get($breakpoint, tab)) {
            @content;
        }
    }

    @if $point ==lap {
        @media screen and (min-width: map-get($breakpoint, lap)) {
            @content;
        }
    }

    @if $point ==des {
        @media screen and (min-width: map-get($breakpoint, des)) {
            @content;
        }
    }
}

@mixin breakpoint-max($point) {
    @if $point ==pho {
        @media screen and (max-width: map-get($breakpoint, pho)) {
            @content;
        }
    }

    @if $point ==pha {
        @media screen and (max-width: map-get($breakpoint, pha)) {
            @content;
        }
    }

    @if $point ==tab {
        @media screen and (max-width: map-get($breakpoint, tab)) {
            @content;
        }
    }

    @if $point ==lap {
        @media screen and (max-width: map-get($breakpoint, lap)) {
            @content;
        }
    }

    @if $point ==des {
        @media screen and (max-width: map-get($breakpoint, des)) {
            @content;
        }
    }
}